# -*- coding: utf-8 -*-
"""s&p_dataGOOG-1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1PSw4-qX8_stbVJojMWHozZNCGuPtpwU4

<hr>

### Context
* Google Stock Price

### Content of Dataset
* Historical stock prices (last 5 years) for all companies currently found on the S&P 500 index.

* All the files have the following columns:
  * Date - in format: yy-mm-dd
  * Open - price of the stock at market open (this is NYSE data so all in USD)
  * High - Highest price reached in the day
  * Low Close - Lowest price reached in the day
  * Volume - Number of shares traded
  * Name - the stock's ticker name
  
<hr>
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.preprocessing import MinMaxScaler

from keras.models import Sequential
from keras.layers import Dense
from keras.layers import SimpleRNN
from keras.layers import Dropout

import plotly.graph_objs as go
import plotly.offline as offline

import warnings
warnings.filterwarnings('ignore')

data = pd.read_csv("/content/cs-1.csv")
data.head()

dataGOOG = data.loc[data['Name']  == 'GOOG']
dataGOOG

print(dataGOOG.shape)

trace_high = go.Scatter(x=dataGOOG.date,
                        y=dataGOOG.high,
                        
                        name = "Google High",
                        
                        line = dict(color = '#6699FF')
                       )
trace_low = go.Scatter( x=dataGOOG.date,
                        y=dataGOOG.low,
                        
                        name = "Google Low",
                        
                        line = dict(color = '#FF6633')
                       )
trace_open = go.Scatter( x=dataGOOG.date,
                        y=dataGOOG.open,
                        
                        name = "Google Open",
                        
                        line = dict(color = 'red')
                       )
trace_close = go.Scatter( x=dataGOOG.date,
                        y=dataGOOG.close,
                        
                        name = "Google Close",
                        
                        line = dict(color = 'black')
                       )
data_figure = [trace_open,trace_high, trace_low,trace_close]
layout = dict(
    
    title = 'Google Stock Price Data ',
    
    xaxis = dict(rangeselector = dict(buttons = list([dict(count = 1,
                                                           label = '1m',
                                                           step = 'month',
                                                           stepmode = 'todate',
                                                          visible = True),
                                                      
                                                  dict(count = 3,
                                                           label = '3m',
                                                           step = 'month',
                                                           stepmode = 'backward',
                                                          visible = True),
                                                      
                                                      dict(count = 6,
                                                           label = '6m',
                                                           step = 'month',
                                                           stepmode = 'backward',
                                                          visible = True),
                                                  
                                                      dict(step = 'all')])
                                     ),
                 
                 rangeslider=dict(visible = True),
                 type='date'
    )
)
fig = dict(data=data_figure, 
           layout=layout)

offline.iplot(fig)

"""#### Plot the candlesticks
The plot has the following components:
* A bounding box whose y values represent the range between the stock's open and close prices 
* A green box represents a higher close value than open (i.e. stock price went up that day)
* The box is red when the stock closed lower
* The vertical lines (bars above and below the box) show the range of intra-day high and low prices
* The vertical lines are capped at the top by horizontal lines called whiserks. By default, the width of the whisker is 0 which is why we don't see them

Notice that a slider appears by default along the X axis
"""

data_temp = dataGOOG.iloc[965:975,:]
trace = go.Candlestick(x = data_temp.date,                       
                       open = data_temp.open,                       
                       high = data_temp.high,                       
                       low = data_temp.low,                       
                       close = data_temp.close,
                      increasing = dict(fillcolor = 'greenyellow', 
                                         line = dict(color = 'green', 
                                                     width = 3
                                                    )),
                       decreasing = dict(fillcolor = 'lightcoral'),                       
                       whiskerwidth = 0.2)
data_figure_2 = [trace]
layout = dict(title = 'Google Stock Price Data ')
fig = dict(data=data_figure_2, 
           layout=layout)
offline.iplot(fig)

"""## Open Price Animation"""

data_temp = dataGOOG.iloc[875:975,:]
data_open = list(data_temp['open'])
dateList = list(data_temp['date'])
xList = []
yList = []
framesList = []
for i in range(len(dateList)):
    
    xList.append(dateList[i])
    yList.append(data_open[i])
    
    framesList.append(dict(data = [dict(x = xList.copy(), y = yList.copy())]))
#
playButton = dict(label = 'Play',
                  method= 'animate',
                  args= [None, 
                         dict(fromcurrent = True, 
                              transition = dict(duration = 200), 
                              frame = dict(duration = 100)
                             )
                        ]
                 )
#
pauseButton = dict(label = 'Pause',
                  method= 'animate',
                  args= [[None], dict(mode = 'immediate')]
                 )
#
layout = go.Layout(xaxis = dict(range = [dateList[0], dateList[-1]]), 
                   yaxis = dict(range = [0, 1 + max(data_open)]),
                   
                   updatemenus = [dict(type = 'buttons',
                                       buttons = [playButton, pauseButton]
                                       )
                                 ]
                  )
#
fig = dict(data=[{}], 
           layout=layout, 
           frames = framesList)

offline.iplot(fig)


# -*- coding: utf-8 -*-
"""s&p_time series data analysis -2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_Fu4X2ns5WPp2JG9FZaTL0oRmqZTuqw1
"""

import numpy as np
import pandas as pd 
import matplotlib.pyplot as plt
import matplotlib.dates as dates
import matplotlib as mpl
import seaborn as sns 
import os

data = pd.read_csv("/content/cs-1.csv")

dataAAPL = data.loc[data['Name']  == 'AAPL']
dataGOOG = data.loc[data['Name']  == 'GOOG']
dataMSFT = data.loc[data['Name']  == 'MSFT']
dataAMZN = data.loc[data['Name']  == 'AMZN']



dataAAPL.describe().T

dataGOOG.describe().T

dataMSFT.describe().T

dataAMZN.describe().T

dataAAPL.info()

dataAAPL['date']=pd.to_datetime(dataAAPL['date'])
dataGOOG['date']=pd.to_datetime(dataGOOG['date'])
dataMSFT['date']=pd.to_datetime(dataMSFT['date'])
dataAMZN['date']=pd.to_datetime(dataAMZN['date'])
dataAAPL.info()

"""We can see that the data column values have changed to datetime64 type"""

dataAAPL.plot(x='date', y='close',legend=True,figsize=(20,8))
plt.ioff()

"""We have stock Price for 5 years starting from 2013 to 2018

**Volume traded for Apple Stock**
"""

title='VOLUME TRADED'
ylabel='Volume'
xlabel='Time'
ax=dataAAPL.plot(x='date', y='volume',legend=True,figsize=(20,8));
ax.autoscale(axis='x',tight=True)  # use both if want to scale both axis
ax.set(xlabel=xlabel,ylabel=ylabel)
plt.ioff()

"""**Plotting between Specified time**"""

dataAAPL.plot(x='date', y='close',xlim=['2016-01-01','2017-12-31'],ylim=[80,180],legend=True,figsize=(20,8),ls='--',c='red')
plt.ioff()

"""We have ploted the closing Price by specifying the range of dates xlim

**Moving Average for Apple Stock**
"""

dataAAPL['close_10']=dataAAPL['close'].rolling(10).mean()
dataAAPL['close_50']=dataAAPL['close'].rolling(50).mean()
ax=dataAAPL.plot(x='date',y='close',title='AAPL Close Price',figsize=(20,8))
dataAAPL.plot(x='date',y='close_10',color='red',ax=ax)
dataAAPL.plot(x='date',y='close_50',color='k',ax=ax)
plt.ioff()

"""**Daily Returns**"""

dataAAPL['Daily Return']=dataAAPL['close'].pct_change()
dataAAPL['Daily Return'].plot(figsize=(20,8),legend=True,linestyle='--',marker='o')
plt.ioff()

"""We can See maximum daily fluctuation in ths stock is 8 %

**Average Daily return**
"""

sns.distplot(dataAAPL['Daily Return'].dropna(),bins=2000,color='purple')
plt.ioff()

dataAAPL['Daily Return'].hist(bins=100)
plt.ioff()

"""The above stock follows a normal distribution betweem +2% and -2%

**Forecasting Apple Stock Price**
"""

df_prophet=dataAAPL[['date','close']]
df_prophet=df_prophet.sort_values('date')
df_prophet

"""**Renaiming the Column names to Suite Prophet Algorithm**"""

df_prophet=df_prophet.rename(columns={'date':'ds','close':'y'})
df_prophet

"""**Creating the Prophet Model**"""

import random 
import seaborn as sns
from fbprophet import Prophet
m=Prophet()
m.fit(df_prophet)
future=m.make_future_dataframe(periods=365)
forecast=m.predict(future)
forecast

"""**Plotting the Apple Stock Forecast for Period of One years**"""

figure=m.plot(forecast,xlabel='Date',ylabel='Closing Price')

"""The model predicts that the Apple stock Price would increase from Mar 2018 to Mar 2019.

**Plotting component of the Forecast**
"""

figure=m.plot_components(forecast)

"""1.Historical Trend Show that the Price of Apple stock has been increasing.Ivestors must have made good money on it

2.Weekly trend shows that the Stock price increase is highest on Tuesday then reduces as week proceeds.Please do note that Saturday and Sunday are off for the Stock Exchange.

3.The annual trend shows the seasoniality of the stock.It can be figured out the stock price peaks in month of May.
"""